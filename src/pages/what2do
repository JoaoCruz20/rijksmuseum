This is what to do to finish the project itself has it is required

Refactor with adding the types and Interfaces through the pages.
Refactor the names to better Description

Follow the SOLID principles (only follows TS).
SRP//
BreakDown the TSX to smaller pieces
Fetch/apiCaller breakdown into a different file that is individual
Functions that don't need to be in main file, put in another file So it doesn't have to be in main React Function(similar to the Fetcher)
//OCP
Simply and try not to repeat the same component/logic
//LSP
?
//ISP
Interface the Props of each components and logic.
User shouldn't depend on Components that they do not use
Simplify, especially in references of values
//DIP
Make Components extende instead of completely changed to avoid problems.

// to improve performance memo the React Components
// use useCallback and useMemo
// dynamic import?
// lazy loading - React Lazy
// Web Workers - To check

DONE -> TransForm certaing values such has the APIkey into global variables. -> API key has been made a global
DONE -> The randomizer function has been made into a external function that is being reused. -> now the fetch function needs to be done
DONE -> Add npm package to make values anonymous so that no one can see it. -> make env method and create mask in github -> there are no Masks in Github and .ENV should be in Middleware
DONE -> Finish/fix the Carrousel component so that it properly works (useMemo) -> has been made more efficient with SetInterval done properly -> make sure that if no image is displayed a default one is
DONE -> Refactor the Search Engine using the SOLID principles and useReducer for the SearchForm -> after reviewing, useReducer is not the best. It is one input and we receive continous feeback while the data is being input. useState has been choosen for it. Some chnages have been made, especially giving types. We used Fuctional Proggraming opposed to SOLID
DONE -> Finish the Search Engine with the Search input
DONE -> Redo Footer -> Make the Form actually send an email -> I am fixing the everything but the input doesn't send anything -> used useReducer in the Form for it is several values sent without feedback given while the data is being given
DONE -> Fix NavBar, It breaks if in a different page -> Removed Link in two of the Buttons
DONE -> Make it 100% mobile viable
DONE -> Fix the Welcome to the Rijksmuseum h1 tag and Buttons/Inputs -> buttons done
DONE -> Add to the about Page
DONE -> add the real email for rijkmuseum


//Later
DONE -> Refactor all of the Mobile Version
-> check how to use the spread operator = ...
DONE -> So the slow situation it is not due to perfomance but due to memory leaks that happen in event loop -> we need to refactor again and make the logic all out of React functions so that we can delete the memory we don't use -> we can't delete memory used since Javascript has a garbage collector and doesn't let us delete(high level language) -> So I removed some initial Homepage code,refactored some code and made parts of logic and code into components by themselfes. Used useMemo properly, all of these made a drastic improvement. The only component that is still slow(ish) is navbar because it accesses window, which is a global variable and type, and that makes it slow(for some reason), The rest is perfect.
DONE -> Improve the Mobile Version -> Improved the NavBar and Footer -> improved and fixed a lot
-> Needs the Results to be fixed in terms of visuals
-> Web version of suggestions is broken
-> Web Worker needs to be done
-> Add a back button to search page and useMemo to remeber the data that was open before -> used memo properly making it remeber the Suggestion button, making performance better
-> Redo the ReadME.md File
-> Refactor the any type. refactor any possible logic to make the website much more smoother experience
-> add a bot component that will help
-> Refactor any CSS and use better dynamic CSS -> made some dynamic CSS but might need more
-> read the background color and change text based on that(IntroCard and Carousel)
-> pagination on results -> will be the hardest pagination done so far